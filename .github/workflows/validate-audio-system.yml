name: Java Audio Setup Check

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-audio:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17.0.6'
          distribution: 'temurin'

      - name: Install PulseAudio on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pulseaudio
          pulseaudio --check || pulseaudio --start
          pactl load-module module-null-sink sink_name=vspeaker sink_properties=device.description=virtual_speaker
          pactl load-module module-remap-source master=vspeaker.monitor source_name=vmic source_properties=device.description=virtual_mic

      - name: Install BlackHole on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install blackhole-2ch

      - name: Install Scream on Windows
        if: matrix.os == 'windows-latest'
              - run: 'Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip -OutFile Scream4.0.zip'
              - run: 'Expand-Archive -Path Scream4.0.zip -DestinationPath Scream'
          # To work around https://github.com/duncanthrax/scream/issues/215, create our own self-signed certificate for the Scream driver.
          # makecert.exe insists on interactively asking the user for a password (sigh...), so use OpenSSL instead.
          # `-extensions v3_req` is a trick to make sure the resulting cert has basic constraint CA:FALSE (the default is CA:TRUE which is problematic here) without having to create an OpenSSL config file.
              - run: 'openssl req -batch -verbose -x509 -newkey rsa -keyout ScreamCertificate.pvk -out ScreamCertificate.cer -nodes -extensions v3_req'
              - run: 'openssl pkcs12 -export -nodes -in ScreamCertificate.cer -inkey ScreamCertificate.pvk -out ScreamCertificate.pfx -passout pass:'
          # This is just to make sure signtool.exe is in the PATH
              - uses: ilammy/msvc-dev-cmd@v1
          # Sign the driver with the self-signed certificate we just made.
              - run: 'signtool sign /v /fd SHA256 /f ScreamCertificate.pfx Scream\Install\driver\x64\Scream.cat'
          # Tell Windows to trust the self-signed certificate we just made.
          # (For some reason it has to be added to both stores for it to work.)
              - run: 'Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\root'
              - run: 'Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\TrustedPublisher'
          # Finally, install the driver.
              - run: 'Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream'
                # For convenience, make sure we fail fast if for whatever reason the install gets blocked on some GUI prompt.
                timeout-minutes: 5
              - run: net start audiosrv
        shell: powershell

      - name: Create and run Java audio test
        run: |
          echo 'import javax.sound.sampled.AudioSystem;
          import javax.sound.sampled.AudioInputStream;
          import javax.sound.sampled.Clip;
          import javax.sound.sampled.LineUnavailableException;
          import javax.sound.sampled.UnsupportedAudioFileException;
          import java.io.File;
          import java.io.IOException;

          public class AudioTest {
              public static void main(String[] args) {
                  try {
                      File audioFile = new File(".github/workflows/test.wav");
                      if (!audioFile.exists()) {
                          System.out.println("Audio file not found.");
                          return;
                      }
                      AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);
                      Clip clip = AudioSystem.getClip();
                      clip.open(audioStream);
                      System.out.println("Audio system initialized and clip loaded successfully.");
                  } catch (LineUnavailableException | UnsupportedAudioFileException | IOException e) {
                      e.printStackTrace();
                  }
              }
          }' > AudioTest.java
          javac AudioTest.java
          java AudioTest
